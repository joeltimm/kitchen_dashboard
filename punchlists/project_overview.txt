Project Overview

Run command on Raspberry Pi:
  sudo apt install -y python3 python3-pip python3-venv git \
  chromium-browser unclutter xdotool libatlas-base-dev \
  libjpeg-dev libfreetype6-dev libffi-dev libssl-dev

Frontend (Web UI)

    HTML/JS/CSS-based interface (runs in fullscreen Chromium kiosk)

    Uses GridStack.js (or Interact.js) for drag-resize widget control

    Communicates with backend via REST API

    Settings UI for:

        Calendar view options (1M, 3W, 2W, 1W, rolling)

        Timezone

        Display on/off schedule

        Widget z-order & layout

Backend (Flask, Python)

    REST API endpoints:

        /api/calendar, /api/weather, /api/photos, etc.

        /api/settings for layout and scheduling

    Scheduled polling of Google Calendar and caching

    Reads credentials securely from /joel/common/auths

    Logs all errors to logs/error.log

    Daily summary email via Gmail with status/errors

System Integration

    Launches via systemd or .desktop file on boot

    Starts Flask backend and opens Chromium in kiosk mode pointing to dashboard

    Uses SQLite or JSON for layout/cache persistence

    Fully git-tracked (excluding secrets/logs)

Updated Directory Structure

/joel/
├── kitchen_dashboard/
│   ├── backend/
│   │   ├── app.py               # Flask server entry point
│   │   ├── calendar.py          # Google Calendar integration
│   │   ├── calendar_cache.py    # Local calendar cache system
│   │   ├── weather.py           # Local weather data fetcher
│   │   ├── photos.py            # OneDrive photo handler
│   │   ├── emailer.py           # Gmail daily summary sender
│   │   ├── config.py            # Loads from /joel/common/auths/config.env
│   │   ├── scheduler.py         # On/off time control, polling loop
│   │   ├── utils.py             # Helper utilities (timestamps, retries, etc.)
│   │   └── logs/
│   │       └── error.log
│   ├── frontend/
│   │   ├── templates/
│   │   │   └── index.html       # Main dashboard UI
│   │   ├── static/
│   │   │   ├── css/
│   │   │   │   └── styles.css
│   │   │   └── js/
│   │   │       └── dashboard.js # Handles drag/resize, AJAX save/load
│   ├── static_data/
│   │   ├── layout.json          # Cached widget positions/sizes/z-order
│   │   └── settings.json        # User settings (timezone, display on/off)
│   ├── startup/
│   │   ├── autostart.desktop    # GUI autostart file (if using LXDE)
│   │   └── run_on_boot.sh       # Launch Flask + Chromium on boot
│   ├── .env                     # Points to /joel/common/auths/config.env
│   ├── .gitignore
│   ├── requirements.txt         # Python dependencies
│   ├── setup.sh                 # Installer for Raspberry Pi
│   └── README.md
└── common/
    └── auths/
        ├── google_token.json        # Google Calendar token
        ├── onedrive_token.json      # OneDrive access token
        ├── gmail_credentials.json   # Gmail OAuth or App Password
        └── config.env               # Shared secrets, timezone, API keys

Let me know and I’ll begin Step 1: Setup & Bootstrap Installer Script for your Pi.
Want a visual layout diagram as well?
You said:
Yes a visual layout diagram and then we can start the step 1
ChatGPT said:
Generated image

gunicorn service files 
    /etc/systemd/system/kitchen_dashboard_gunicorn.service
flask service files
    /etc/systemd/system/kitchen_dashboard.service